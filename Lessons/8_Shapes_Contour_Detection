import cv2
import numpy

def getContours(img, imgContour):
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    #EXTERNAL retrieves extreme external contours (edge of shapes in our case), request for all or compressed values

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > 500: #reduces amount of noise
            cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 3)
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.02*peri, True) ##gives the corner points
            print(len(approx)) #prints number of corner points
            objCor = len(approx)
            x, y, w, h = cv2.boundingRect(approx)

            if objCor == 3:
                ObjectType = "Triangle"
            elif objCor == 4:
                asp_ratio = w/(float(h))
                if asp_ratio > 0.95 and asp_ratio < 1.05:
                    ObjectType = "Square"
                else: 
                     ObjectType = "Rectangle"
            else:
                ObjectType = "Circle"


            cv2.rectangle(imgContour, (x,y), (x+w, y+h), (0,255, 0), 2) ##creates a bounding box around object
            cv2.putText(imgContour, ObjectType, ((x + (w//2)), y + h//2 -10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 255, 255), 1)

            




def fun(): 
    path = 'Resources/shapes.png'
    img = cv2.imread(path)
    imgContour = img.copy()

    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray, (7,7), 1)
    imgCanny = cv2.Canny(imgBlur, 50, 50)

    cv2.imshow(img) ##Image
    cv2.imshow(imgGray) #Greyscale 
    cv2.imshow(imgBlur) #Blurres Greyscale
    cv2.imshow(imgCanny) #detects edges

    getContours(img, imgContour)


    cv2.waitKey(0)

